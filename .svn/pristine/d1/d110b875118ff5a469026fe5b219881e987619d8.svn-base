<?php

namespace app\controllers;

use yii;
use app\models\Product;
use yii\web\Controller;
use app\models\Dictitem;
use app\models\Message;
use app\models\Submessage;
use app\models\Contact;
use app\common\Common;
use yii\data\Pagination;
use app\models\User;
use app\models\Shopcart;
use app\models\Userinfo;
use app\models\Userorder;
use app\models\Productorder;

class FontadminController extends Controller
{
    public $layout = false; //设置使用的布局文件
    public $enableCsrfValidation = false;

    //跳转到后台我的地址页面
    public function actionAddressafter()
    {
        if(Yii::$app->request->isPost){

        }else{
            $userId = Yii::$app->session['userId'];
            $userinfos = Userinfo::find()->where('userId = :userId',[":userId" => $userId])->orderBy('userInfoClicks')->all();
            return $this->render('addressafter',[
                'userinfos' => $userinfos
            ]);
        }

    }

    //跳转到后台购物车
    public function actionShoppingcart()
    {
        if(yii::$app->session['username'] == null){
            echo "<script>alert('请先登录！')</script>";
            return $this->render('home');
        }else{
            $userId = Yii::$app->session['userId'];

            $query = new \yii\db\Query();
            $products = $query->select('b.id as id,b.productTitle as productTitle,b.productPrice as productPrice,b.productDiscount as productDiscount,b.picUrl as picUrl,b.productSize as productSize,b.productType as productType')
                ->from('zsyj_shopcart a')
                ->where('userId = :userId',[":userId" => $userId])
                ->rightJoin('zsyj_product b','a.productId = b.id')
                ->all();

            $dictItem = Dictitem::find()
                ->where(['dictCode' => 'DICT_PRODUCTTYPE'])
                ->all();
            foreach($products as $key=>$data) {
                foreach ($dictItem as $index => $value) {
                    if ($data['productType'] == $value->dictItemCode) {
                        $products[$key]['productType'] = $value->dictItemName;
                    }
                }
            }

            return $this->render('shoppingcart',[
                'products' => $products
            ]);
        }
    }

    //跳转到后台结算
    public function actionPurchase()
    {
        if(Yii::$app->request->isPost){

        }else{
            $userId = Yii::$app->session['userId'];
            $counts = Yii::$app->request->get('counts');
            $counts_array = explode('-',$counts);


            $query = new \yii\db\Query();
            $products = $query->select('b.id as id,b.productTitle as productTitle,b.productPrice as productPrice,b.productDiscount as productDiscount,b.picUrl as picUrl,b.productSize as productSize,b.productType as productType,a.productNum as productNum')
                ->from('zsyj_shopcart a')
                ->where('userId = :userId',[":userId" => $userId])
                ->rightJoin('zsyj_product b','a.productId = b.id')
                ->all();

            $dictItem = Dictitem::find()
                ->where(['dictCode' => 'DICT_PRODUCTTYPE'])
                ->all();
            foreach($products as $key=>$data) {
                foreach ($dictItem as $index => $value) {
                    if ($data['productType'] == $value->dictItemCode) {
                        $products[$key]['productType'] = $value->dictItemName;
                    }
                }
                foreach($counts_array as $a => $val){
                    if($key == $a){
                        $products[$key]['productNum'] = $val;
                    }
                }
            }

            $userinfos = Userinfo::find()->where('userId = :userId',[":userId" => $userId])->orderBy('userInfoClicks')->all();
            return $this->render('purchase',[
                'products' => $products,
                'userinfos' => $userinfos
            ]);
        }

    }

    //跳转到完成订单
    public function actionOrdercomplete()
    {
        if(Yii::$app->request->isPost){

        }else
        {
            $userId = Yii::$app->session['userId'];
            $userinfo = Userinfo::find()->where('userId = :userId',[":userId" => $userId])->one();

            $productNum = Yii::$app->request->get('productNum');
            //新建userorder记录
            $userorder = new Userorder;
            $userorder->id = Common::generateID();
            $userorder->userId = Yii::$app->session['userId'];
            $userorder->recipientName = $userinfo->recipientName;
            $userorder->mobilephone = $userinfo->mobilephone;
            $userorder->areaAddress = $userinfo->areaAddress;
            $userorder->detailAddress = $userinfo->detailAddress;
            $userorder->postcode = $userinfo->postcode;
            $userorder->truename = $userinfo->truename;
            $userorder->orderdateTime = date("Y-m-d H:i:s");
            $userorder->totalCost = Yii::$app->request->get('totalCost');
            $userorder->orderState = '1';
            $userorder->orderCode = Common::generateOrderCode();
            $userorder->save();

            //结算一个商品
            if($id = Yii::$app->request->get('id')){
                $productorder = new Productorder();//新建productorder记录
                $productorder->id = Common::generateID();
                $productorder->orderId = $userorder->id;
                $productorder->productId = $id;
                $productorder->productNum = $productNum;
                $productorder->save();
                Shopcart::deleteAll('userId = :userId and productId = :productId',[":userId" => $userId,":productId" => $id]);
            }
            //结算多个商品
            if($ids = Yii::$app->request->get('ids')){
                $productNums = Yii::$app->request->get('productNums');
                $products_array = explode('-',$productNums);
                $ids_array = explode('-',$ids);
                foreach($ids_array as $key => $data) {
                    $productorder = new Productorder();
                    $productorder->id = Common::generateID();
                    $productorder->orderId = $userorder->id;
                    $productorder->productId = $data;
                    foreach($products_array as $index => $value){
                        if($key == $index){
                            $productorder->productNum = $value;
                        }
                    }
                    $productorder->save();
                    Shopcart::deleteAll('userId = :userId and productId = :productId',[":userId" => $userId,":productId" => $data]);
                }
            }


            return $this->render('ordercomplete',[
                'userinfo' => $userinfo,
                'userorder' => $userorder
            ]);
        }

    }

    //跳转到后台订单列表
    public function actionOrderafter()
    {
        if(Yii::$app->request->isPost){

        }else{
            $id = Yii::$app->session['userId'];
            $userorder = Userorder::find()->where(['userId' => $id]);
            $pages = new Pagination(['totalCount' => $userorder->count(), 'pageSize' => Common::PAGESIZE]);//分页
            $models = $userorder->offset($pages->offset)->limit($pages->limit)->orderBy('orderdateTime DESC')->all();
            return $this->render('orderafter', [
                'userorder' => $models,
                'pages' => $pages,
            ]);
        }
    }

    //跳转到订单详情
    public function actionOrderdetail()
    {
        if(Yii::$app->request->isPost){

        }else{
            $orderId = Yii::$app->request->get('id');
            $userorder = Userorder::findOne($orderId);

            $productorders = Productorder::find()->where('orderId = :orderId',[":orderId" => $orderId])->all();

            $query = new \yii\db\Query();
            $productorders = $query->select('b.id as id,a.productNum as productNum,b.productTitle as productTitle,b.productPrice as productPrice,b.productDiscount as productDiscount,b.picUrl as picUrl')
                ->from('zsyj_productorder a')
                ->where('orderId = :orderId',[":orderId" => $orderId])
                ->rightJoin('zsyj_product b','a.productId = b.id')
                ->all();

            return $this->render('orderdetail',[
                'userorder' => $userorder,
                'productorders' => $productorders
            ]);
        }

    }

    //跳转到个人资料
    public function actionPersonaldata()
    {
        if(Yii::$app->request->isPost){

        }else{
            $id = Yii::$app->session['userId'];
            $user = User::findOne($id);
            $dictItem = Dictitem::find()
                ->where(['dictCode' => 'DICT_SEX'])
                ->all();
            $dictItemS = Dictitem::find()
                ->where(['dictCode' => 'DICT_MEMBER'])
                ->all();
            return $this->render('personaldata',[
                'user' => $user,
                'dictItem' => $dictItem,
                'dictItemS' => $dictItemS
            ]);
        }

    }

    //跳转到账户安全
    public function actionPassword()
    {
        if(Yii::$app->request->isPost){
            $verifyCode = Yii::$app->request->post('verifyCode');
            if(strtolower(Yii::$app->session['userCode']) == strtolower($verifyCode)){
                $fontUser = User::findOne(Yii::$app->session['userId']);
                $fontUser->password = Common::hashMD5(Yii::$app->request->post('password'));
                if($fontUser->save()){
                    return 'success';
                }else{
                    return 'fail';
                }
                Yii::$app->session->remove('userCode');
            }else{
                return 'verifyError';
            }
        }else{
            return $this->render('password');
        }

    }

    //跳转到我的消息
    public function actionMymessages()
    {
        if(Yii::$app->request->isPost){

        }else{
            $userId = Yii::$app->session['userId'];
            $messages = Message::find()->where('userId = :userId',[":userId" => $userId])->all();
            return $this->render('mymessages',[
                'messages' => $messages
            ]);
        }

    }

    //跳转到我的留言
    public function actionMynews()
    {
        if(Yii::$app->request->isPost){

        }else{
            return $this->render('mynews');
        }

    }

    //保存用户信息
    public function actionUpdate(){
        $id = Yii::$app->request->post('id');
        $user = User::findOne($id);
        $user->mobilephone = Yii::$app->request->post('mobilephone');
        $user->sex = Yii::$app->request->post('sex');
        $user->email = Yii::$app->request->post('email');
        $user->postcode = Yii::$app->request->post('postcode');
        if ($user->save()){
            return 'success';
        }else{
            return 'fail';
        }
    }

    //验证密码
    public function actionCheckpassword(){
        $password = Yii::$app->request->post("password");
        $userId = Yii::$app->session['userId'];
        $user = User::findOne($userId);
        if($user->password == Common::hashMD5($password)){
            return 'success';
        }else{
            return 'fail';
        }
    }

    //加入购物车
    public function actionAddshopcart(){
        $productId = Yii::$app->request->post("id");
        $userId = Yii::$app->session['userId'];
        if(Shopcart::find()->where('userId = :userId and productId = :productId',[":userId" => $userId,":productId" => $productId])->one()){
            echo "<script>alert('此商品已在购物车中')</script>";
        }else{
            $shopcart = new Shopcart();
            $shopcart->productId = $productId;
            $shopcart->userId = $userId;
            $shopcart->save();
            return 'success';
        }
    }

    //从购物车删除
    public function actionDeleteshopcart(){
        $productId = Yii::$app->request->post("id");
        $userId = Yii::$app->session['userId'];
        Shopcart::deleteAll('userId = :userId and productId = :productId',[":userId" => $userId,":productId" => $productId]);
        return 'success';
    }

    //从购物车删除多个商品
    public function actionDelallshopcart(){
        $ids = Yii::$app->request->post("ids");
        $userId = Yii::$app->session['userId'];
        $ids_array = explode('-',$ids);
        foreach($ids_array as $key => $data){
            Shopcart::deleteAll('userId = :userId and productId = :productId',[":userId" => $userId,":productId" => $data]);
        }
        return 'success';
    }

    //新增收货地址
    public function actionAddaddress()
    {
        if(Yii::$app->request->isPost){

        }else{
            $inform = New Userinfo();
            $inform->id = Common::generateID();
            $inform->userId =yii::$app->session['userId'];
            $inform->recipientName = Yii::$app->request->get("username");
            $inform->mobilephone = Yii::$app->request->get("tel");
            $inform->areaAddress = Yii::$app->request->get("city");
            $inform->detailAddress = Yii::$app->request->get("address");
            $inform->save();
            $userId = Yii::$app->session['userId'];
            $query = new \yii\db\Query();
            $products = $query->select('b.id as id,b.productTitle as productTitle,b.productPrice as productPrice,b.productDiscount as productDiscount,b.picUrl as picUrl,b.productSize as productSize')
                ->from('zsyj_shopcart a')
                ->where('userId = :userId',[":userId" => $userId])
                ->rightJoin('zsyj_product b','a.productId = b.id')
                ->all();

            $userinfos = Userinfo::find()->where('userId = :userId',[":userId" => $userId])->orderBy('userInfoClicks')->all();
            return $this->render('purchase',[
                'products' => $products,
                'userinfos' => $userinfos
            ]);
        }

    }

    //单商品页新增收货地址
    public function actionAddaddress2()
    {
        if(Yii::$app->request->isPost){

        }else{
            $userId = Yii::$app->session['userId'];
            $inform = New Userinfo();
            $inform->id = Common::generateID();
            $inform->userId =$userId;
            $inform->recipientName = Yii::$app->request->get("username");
            $inform->mobilephone = Yii::$app->request->get("tel");
            $inform->areaAddress = Yii::$app->request->get("city");
            $inform->detailAddress = Yii::$app->request->get("address");
            $inform->save();

            $userinfos = Userinfo::find()->where('userId = :userId',[":userId" => $userId])->orderBy('userInfoClicks')->all();
            return $this->render('addressafter',[
                'userinfos' => $userinfos
            ]);
        }

    }

    //删除用户地址信息
    public function actionDeladdress(){
        $infoId = Yii::$app->request->get("id");
        $userinfo = Userinfo::findOne($infoId);
        $userinfo->delete();
        $userId = Yii::$app->session['userId'];
        $userinfos = Userinfo::find()->where('userId = :userId',[":userId" => $userId])->orderBy('userInfoClicks')->all();
        return $this->render('addressafter',[
            'userinfos' => $userinfos
        ]);
    }

    //跳转到后台结算单个商品
    public function actionPurchaseone()
    {
        if(Yii::$app->request->isPost){

        }else{
            $userId = Yii::$app->session['userId'];
            $product = Product::findOne(Yii::$app->request->get("productId"));
            $buynum = Yii::$app->request->get("buynum");
            $dictItem = Dictitem::find()
                ->where(['dictCode' => 'DICT_PRODUCTTYPE'])
                ->all();
            foreach($dictItem as $index=>$value){
                if($product->productType == $value->dictItemCode){
                    $product->productType = $value->dictItemName;
                }
            }
            $userinfos = Userinfo::find()->where('userId = :userId',[":userId" => $userId])->orderBy('userInfoClicks')->all();
            return $this->render('purchaseone',[
                'product' => $product,
                'userinfos' => $userinfos,
                'buynum' => $buynum
            ]);
        }

    }

    //删除订单
    public function actionDelorder(){
        $id = Yii::$app->request->post("id");
        $userorder = Userorder::findOne($id);
        if($userorder->delete()){
            return 'success';
        }else{
            return 'fail';
        }
    }
}
